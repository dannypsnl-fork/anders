module test where

id (A : U) (a : A) : A := a

sigmaIntro (A : U) (B : A -> U) (x : A) (u : B (id A x)) : (x : A) * B x := (x, u)

sigmaProj₂ : (A : U) -> (B : A -> U) ->
             (z : (x : A) * B x) -> B z.1 :=
λ (A : U) (B : A -> U) (z : (x : A) * B x) -> z.2

const (A : U) (B : U) (a : A) (b : B) : A = a

test : (A : U) -> (B : U) -> (A -> B) -> A -> B :=
λ (A : U) (B : U) (f : A -> B) (x : A) -> f x

trio : U 2 := (fst : U 1) × (snd : U 1) × (U 1)
instance : trio := (U, U -> U, U -> U -> U)