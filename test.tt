def id : (A : U) -> A -> A :=
λ (A : U) (a : A) -> a

def sigmaIntro : (A : U) -> (B : A -> U) ->
                 (x : A) -> B x -> (x : A) * B x :=
λ (A : U) (B : A -> U) (x : A) (u : B x) -> (x, u)

def sigmaProj₂ : (A : U) -> (B : A -> U) ->
                 (z : (x : A) * B x) -> B z.1 :=
λ (A : U) (B : A -> U) (z : (x : A) * B x) -> z.2

def const : (A : U) -> (B : U) -> A -> B -> A :=
λ (A : U) (B : U) (a : A) (b : B) -> a

def test : (A : U) -> (B : U) -> (A -> B) -> A -> B :=
λ (A : U) (B : U) (f : A -> B) (x : A) -> f x